{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":150839,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":128082,"modelId":151000}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"e695cb58-b45d-4e7f-a90f-42c42747d89c","_cell_guid":"7e7352aa-b881-42f3-9f7b-efec58883f71","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:07:50.954305Z","iopub.execute_input":"2024-11-09T03:07:50.954689Z","iopub.status.idle":"2024-11-09T03:07:51.973371Z","shell.execute_reply.started":"2024-11-09T03:07:50.954650Z","shell.execute_reply":"2024-11-09T03:07:51.972296Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"/kaggle/input/alexnetcifar10/pytorch/default/1/AlexNetCIFAR10.pth\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import torch\nimport torchvision\nimport torchvision.datasets as datasets\nimport torchvision.transforms as transforms\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","metadata":{"_uuid":"eafedf31-6267-473a-aedf-1cbd8c77f07d","_cell_guid":"7e00957b-6d04-41a1-b32a-44a7ee25a190","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:07:51.974803Z","iopub.execute_input":"2024-11-09T03:07:51.975183Z","iopub.status.idle":"2024-11-09T03:07:56.855217Z","shell.execute_reply.started":"2024-11-09T03:07:51.975150Z","shell.execute_reply":"2024-11-09T03:07:56.854023Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Update transform for 224x224 images\ntransform = transforms.Compose([\n    transforms.Resize(224),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n])","metadata":{"_uuid":"6cfcd599-cfd6-4f81-9691-b4ed0adf6e30","_cell_guid":"a9e61e7a-336a-43be-ba5c-1768f0f49c65","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:07:56.857580Z","iopub.execute_input":"2024-11-09T03:07:56.858770Z","iopub.status.idle":"2024-11-09T03:07:56.865517Z","shell.execute_reply.started":"2024-11-09T03:07:56.858704Z","shell.execute_reply":"2024-11-09T03:07:56.863680Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# Setting up Datasets\ntrain = datasets.CIFAR10(root = 'dataset/', train = True, transform = transforms.ToTensor(), download = True)\ntest = datasets.CIFAR10(root = 'dataset/', train = False, transform = transforms.ToTensor(), download = True)","metadata":{"_uuid":"27a1619e-d944-41fb-9280-3dde6ecb77b6","_cell_guid":"3b15944e-2ed6-4b04-a5b1-b2cdccb20d19","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:07:56.868287Z","iopub.execute_input":"2024-11-09T03:07:56.868928Z","iopub.status.idle":"2024-11-09T03:08:03.957378Z","shell.execute_reply.started":"2024-11-09T03:07:56.868884Z","shell.execute_reply":"2024-11-09T03:08:03.956384Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to dataset/cifar-10-python.tar.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 170498071/170498071 [00:03<00:00, 49100759.25it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting dataset/cifar-10-python.tar.gz to dataset/\nFiles already downloaded and verified\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# Setting up Dataloader\n\ntrainset = torch.utils.data.DataLoader(train, batch_size = 10, shuffle = True)\ntestset = torch.utils.data.DataLoader(test, batch_size = 10, shuffle = True)","metadata":{"_uuid":"10074c40-56ac-4976-88b7-e242b0884b16","_cell_guid":"ac6eb6c8-e9d0-49c3-ba62-2f9000a96262","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:03.959691Z","iopub.execute_input":"2024-11-09T03:08:03.960004Z","iopub.status.idle":"2024-11-09T03:08:03.965180Z","shell.execute_reply.started":"2024-11-09T03:08:03.959972Z","shell.execute_reply":"2024-11-09T03:08:03.964116Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Testing the Dataloader\nimport matplotlib.pyplot as plt\n\ndef imshow(img):\n    img = img / 2 + 0.5\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()\n\ndataiter = iter(trainset)\nimages, labels = next(dataiter)\n\nimshow(torchvision.utils.make_grid(images))\nprint(' '.join('%5s' % train.classes[labels[j]] for j in range(10)))","metadata":{"_uuid":"e07b7dab-17d3-4ba0-b602-4835a1db325b","_cell_guid":"d4398b45-c770-4527-9c67-c3920970b465","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:03.966287Z","iopub.execute_input":"2024-11-09T03:08:03.966611Z","iopub.status.idle":"2024-11-09T03:08:04.355011Z","shell.execute_reply.started":"2024-11-09T03:08:03.966579Z","shell.execute_reply":"2024-11-09T03:08:04.353980Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"airplane airplane  frog   dog  frog  bird   cat  frog   cat   dog\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# Training the Model","metadata":{"_uuid":"18345b06-95a5-4f4a-a738-688a787589e8","_cell_guid":"b579fa4b-b03f-484c-b407-7297e78dada2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Importing AlexNet\nmodel = torchvision.models.alexnet(pretrained = True)","metadata":{"_uuid":"18447e40-ee2b-4f37-b33a-1c479972e9ac","_cell_guid":"2610d328-b42f-4609-84e8-f26c3a18d261","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:04.356274Z","iopub.execute_input":"2024-11-09T03:08:04.356626Z","iopub.status.idle":"2024-11-09T03:08:06.219751Z","shell.execute_reply.started":"2024-11-09T03:08:04.356586Z","shell.execute_reply":"2024-11-09T03:08:06.218900Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/alexnet-owt-7be5be79.pth\" to /root/.cache/torch/hub/checkpoints/alexnet-owt-7be5be79.pth\n100%|██████████| 233M/233M [00:01<00:00, 209MB/s] \n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"model","metadata":{"_uuid":"50963a7d-46e3-4d7f-8d7d-d9b6a73c2c76","_cell_guid":"c8f0416a-abee-4b5e-b01b-b50fe2ecd8d6","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:06.221313Z","iopub.execute_input":"2024-11-09T03:08:06.221751Z","iopub.status.idle":"2024-11-09T03:08:06.228430Z","shell.execute_reply.started":"2024-11-09T03:08:06.221688Z","shell.execute_reply":"2024-11-09T03:08:06.227455Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"AlexNet(\n  (features): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))\n    (1): ReLU(inplace=True)\n    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU(inplace=True)\n    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU(inplace=True)\n    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): ReLU(inplace=True)\n    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (11): ReLU(inplace=True)\n    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))\n  (classifier): Sequential(\n    (0): Dropout(p=0.5, inplace=False)\n    (1): Linear(in_features=9216, out_features=4096, bias=True)\n    (2): ReLU(inplace=True)\n    (3): Dropout(p=0.5, inplace=False)\n    (4): Linear(in_features=4096, out_features=4096, bias=True)\n    (5): ReLU(inplace=True)\n    (6): Linear(in_features=4096, out_features=1000, bias=True)\n  )\n)"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"# Modify the first convolutional layer to accept 32x32 images if needed\nmodel.features[0] = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1)\n\n# Modify the classifier to output 10 classes\nmodel.classifier[6] = nn.Linear(4096, 10)\n\n# Send model to device (GPU or CPU)\nmodel = model.to(device)","metadata":{"_uuid":"f54ca756-5a52-48a8-8c47-4d5d0ed987ec","_cell_guid":"cb206d71-56c3-430e-b99c-0be1b1b945f5","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:06.229937Z","iopub.execute_input":"2024-11-09T03:08:06.230518Z","iopub.status.idle":"2024-11-09T03:08:06.468566Z","shell.execute_reply.started":"2024-11-09T03:08:06.230473Z","shell.execute_reply":"2024-11-09T03:08:06.467775Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"criterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.parameters(), lr = 0.001, momentum = 0.9)","metadata":{"_uuid":"b6be0118-8eec-4d30-8ef9-84d98c8a1e6b","_cell_guid":"3f094284-4621-4ee5-bf4f-cc80c4ab538c","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:06.469688Z","iopub.execute_input":"2024-11-09T03:08:06.470068Z","iopub.status.idle":"2024-11-09T03:08:06.475106Z","shell.execute_reply.started":"2024-11-09T03:08:06.470026Z","shell.execute_reply":"2024-11-09T03:08:06.474105Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"from tqdm import tqdm\n\n# Number of epochs\nnum_epochs = 10\n\nfor epoch in range(num_epochs):\n    model.train()\n    running_loss = 0.0\n\n    loop = tqdm(trainset, leave=True)\n    for i, (inputs, labels) in enumerate(loop):\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        # Zero the parameter gradients\n        optimizer.zero_grad()\n\n        # Forward pass\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n\n        # Backward pass and optimize\n        loss.backward()\n        optimizer.step()\n\n        # Update running loss\n        running_loss += loss.item()\n\n        # Update tqdm description with current loss\n        loop.set_description(f\"Epoch [{epoch + 1}/{num_epochs}]\")\n        loop.set_postfix(loss=loss.item())\n\n    # Print average loss for the epoch\n    print(f\"Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(trainset):.4f}\")","metadata":{"_uuid":"4cdc8727-47e2-4aa9-8f23-30dc7b24f260","_cell_guid":"faa8a0b9-fd4f-41bb-b579-691b500fffa9","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-10-30T21:25:57.587239Z","iopub.execute_input":"2024-10-30T21:25:57.587631Z","iopub.status.idle":"2024-10-30T21:26:03.300862Z","shell.execute_reply.started":"2024-10-30T21:25:57.587593Z","shell.execute_reply":"2024-10-30T21:26:03.299443Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tqdm import tqdm\n# Evaluate the model on the test set\ndef evaluate(model, test_loader):\n    model.eval()  # Set model to evaluation mode\n    correct = 0\n    total = 0\n    running_loss = 0.0\n    \n    with torch.no_grad():  # No need to calculate gradients for evaluation\n        for images, labels in tqdm(test_loader, desc=\"Evaluating\"):\n            images, labels = images.to(device), labels.to(device)\n            \n            # Forward pass\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n            \n            # Accumulate the loss\n            running_loss += loss.item()\n\n            # Get predicted class\n            _, predicted = torch.max(outputs, 1)\n            \n            # Update total and correct count for accuracy calculation\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n\n    # Calculate final accuracy and average loss\n    accuracy = 100 * correct / total\n    avg_loss = running_loss / len(test_loader)\n    \n    print(f\"Test Accuracy: {accuracy:.2f}%\")\n    print(f\"Average Loss on Test Set: {avg_loss:.4f}\")\n\n# Run evaluation on the test set\nevaluate(model, testset)","metadata":{"_uuid":"c0999d5a-ca9c-4e06-86db-6fe8c60dbeb6","_cell_guid":"37059a10-efff-4736-bea1-d501ed49234d","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:34.871038Z","iopub.execute_input":"2024-11-09T03:08:34.871804Z","iopub.status.idle":"2024-11-09T03:08:39.923130Z","shell.execute_reply.started":"2024-11-09T03:08:34.871759Z","shell.execute_reply":"2024-11-09T03:08:39.922142Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stderr","text":"Evaluating: 100%|██████████| 1000/1000 [00:05<00:00, 198.43it/s]","output_type":"stream"},{"name":"stdout","text":"Test Accuracy: 79.51%\nAverage Loss on Test Set: 1.1720\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# Saving the model\ntorch.save(model.state_dict(), 'AlexNetCIFAR10.pth')","metadata":{"_uuid":"57761d92-b618-448e-a287-1207d2edaad6","_cell_guid":"5e07de46-fdeb-4c3d-8891-43a487fd32bb","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Patch Attacks Implementation","metadata":{"_uuid":"43257327-bcb7-41fd-9369-bd487c3b5ba4","_cell_guid":"51ccf6fc-7527-4d17-8217-9e57f426b163","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Loading the model\npathway = '/kaggle/input/alexnetcifar10/pytorch/default/1/AlexNetCIFAR10.pth'\nmodel.load_state_dict(torch.load(pathway))\nmodel.eval()","metadata":{"_uuid":"06a7e418-9548-4951-bc9e-4cd1451337d4","_cell_guid":"54ba411f-81a6-4ff2-a858-23a44fa2d7cc","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:06.477647Z","iopub.execute_input":"2024-11-09T03:08:06.478014Z","iopub.status.idle":"2024-11-09T03:08:09.140348Z","shell.execute_reply.started":"2024-11-09T03:08:06.477949Z","shell.execute_reply":"2024-11-09T03:08:09.139416Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/1234764596.py:3: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model.load_state_dict(torch.load(pathway))\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"AlexNet(\n  (features): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU(inplace=True)\n    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n    (4): ReLU(inplace=True)\n    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU(inplace=True)\n    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): ReLU(inplace=True)\n    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (11): ReLU(inplace=True)\n    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))\n  (classifier): Sequential(\n    (0): Dropout(p=0.5, inplace=False)\n    (1): Linear(in_features=9216, out_features=4096, bias=True)\n    (2): ReLU(inplace=True)\n    (3): Dropout(p=0.5, inplace=False)\n    (4): Linear(in_features=4096, out_features=4096, bias=True)\n    (5): ReLU(inplace=True)\n    (6): Linear(in_features=4096, out_features=10, bias=True)\n  )\n)"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"import random\nfrom tqdm import tqdm\n# Patch attack function with variable patch size\ndef apply_patch(image, patch_size_percent=0.03, intensity=1.0):\n    _, height, width = image.size()\n    patch_size = int(height * patch_size_percent)  # Calculate patch size as a percentage of image dimensions\n    patch = torch.full((3, patch_size, patch_size), intensity).to(device)\n    x = random.randint(0, width - patch_size)\n    y = random.randint(0, height - patch_size)\n    patched_image = image.clone()\n    patched_image[:, y:y+patch_size, x:x+patch_size] = patch\n    return patched_image","metadata":{"_uuid":"8f6e630c-40f4-4dea-b959-f5eac0001004","_cell_guid":"e7768531-4374-418f-916d-0c88bb294334","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:50.886126Z","iopub.execute_input":"2024-11-09T03:08:50.886978Z","iopub.status.idle":"2024-11-09T03:08:50.893256Z","shell.execute_reply.started":"2024-11-09T03:08:50.886939Z","shell.execute_reply":"2024-11-09T03:08:50.892280Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Evaluate model with patched images\ndef evaluate_with_patch_attack(model, patch_size_percent=0.03, intensity=1.0):\n    model.eval()\n    correct = 0\n    total = 0\n\n    with torch.no_grad():\n        for images, labels in tqdm(testset, desc=\"Evaluating with Patch Attack\"):\n            images, labels = images.to(device), labels.to(device)\n            patched_images = torch.stack([apply_patch(img, patch_size_percent, intensity) for img in images])\n            outputs = model(patched_images)\n            _, predicted = torch.max(outputs, 1)\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n\n    accuracy = 100 * correct / total\n    print(f\"Accuracy under Patch Attack: {accuracy:.2f}%\")\n\n# Visualize a patched image\ndef show_patched_image(image, patch_size_percent=0.01, intensity=1.0):\n    patched_image = apply_patch(image, patch_size_percent, intensity)\n    imshow(patched_image.cpu())\n\n# Run evaluation with patch attack\nevaluate_with_patch_attack(model)\n\n# Display a sample patched image from the dataset\nsample_image, _ = next(iter(testset))\nshow_patched_image(sample_image[0])","metadata":{"_uuid":"123cb0ee-43f0-4a74-80cb-123e6d34dde8","_cell_guid":"13dcacb5-7429-4eb6-b9b9-349d3e717999","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2024-11-09T03:08:52.879348Z","iopub.execute_input":"2024-11-09T03:08:52.880063Z","iopub.status.idle":"2024-11-09T03:08:57.926384Z","shell.execute_reply.started":"2024-11-09T03:08:52.880024Z","shell.execute_reply":"2024-11-09T03:08:57.925511Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stderr","text":"Evaluating with Patch Attack: 100%|██████████| 1000/1000 [00:04<00:00, 208.48it/s]\n","output_type":"stream"},{"name":"stdout","text":"Accuracy under Patch Attack: 79.51%\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"import torch\nimport random\nfrom tqdm import tqdm\n\n# Patch attack function with increased patch size and centered position option\ndef apply_patch(image, patch_size_percent=0.03, intensity=1.0, position='center'):\n    _, height, width = image.size()\n    patch_size = int(height * patch_size_percent)\n    patch = torch.full((3, patch_size, patch_size), intensity).to(device)\n    \n    if position == 'random':\n        x = random.randint(0, width - patch_size)\n        y = random.randint(0, height - patch_size)\n    elif position == 'center':\n        x = (width - patch_size) // 2\n        y = (height - patch_size) // 2\n    else:\n        raise ValueError(\"Position must be 'random' or 'center'\")\n    \n    patched_image = image.clone()\n    patched_image[:, y:y+patch_size, x:x+patch_size] = patch\n    return patched_image\n\n# Evaluate model with patched images with larger patch and centered patch position\ndef evaluate_with_patch_attack(model, patch_size_percent=0.03, intensity=1.0, position='center'):\n    model.eval()\n    correct = 0\n    total = 0\n\n    with torch.no_grad():\n        for images, labels in tqdm(testset, desc=\"Evaluating with Patch Attack\"):\n            images, labels = images.to(device), labels.to(device)\n            patched_images = torch.stack([apply_patch(img, patch_size_percent, intensity, position) for img in images])\n            outputs = model(patched_images)\n            _, predicted = torch.max(outputs, 1)\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n\n    accuracy = 100 * correct / total\n    print(f\"Accuracy under Patch Attack with {patch_size_percent*100:.1f}% patch: {accuracy:.2f}%\")\n\n# Visualize a patched image to verify effect\ndef show_patched_image(image, patch_size_percent=0.1, intensity=1.0, position='center'):\n    patched_image = apply_patch(image, patch_size_percent, intensity, position)\n    imshow(patched_image.cpu())\n\n# Run evaluation with updated patch attack parameters\nevaluate_with_patch_attack(model, patch_size_percent=0.1, intensity=1.0, position='center')\n\n# Display a sample patched image from the dataset\nsample_image, _ = next(iter(testset))\nshow_patched_image(sample_image[0], patch_size_percent=0.1, intensity=1.0, position='center')","metadata":{"_uuid":"ee0c3227-fc6c-4dc0-9bbc-64638220079e","_cell_guid":"d36333e0-4ecc-4f0e-881b-2673d49a2424","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-11-09T03:11:01.108831Z","iopub.execute_input":"2024-11-09T03:11:01.109228Z","iopub.status.idle":"2024-11-09T03:11:06.326961Z","shell.execute_reply.started":"2024-11-09T03:11:01.109191Z","shell.execute_reply":"2024-11-09T03:11:06.326089Z"}},"outputs":[{"name":"stderr","text":"Evaluating with Patch Attack: 100%|██████████| 1000/1000 [00:04<00:00, 201.18it/s]\n","output_type":"stream"},{"name":"stdout","text":"Accuracy under Patch Attack with 10.0% patch: 64.98%\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":21}]}